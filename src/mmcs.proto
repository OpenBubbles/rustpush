
syntax = "proto3";

package mmcsp;

message AuthorizePut {
    message PutData {
        message Chunk {
            bytes sig = 1;
            optional bytes encryption_key = 2;
            uint32 size = 3;
        }
        message Footer {
            uint32 chunk_count = 1;
            string profile_type = 101;
            optional uint32 f103 = 103;
            optional string f102 = 102;
            optional string f104 = 104;
        }
        message FordDesc {
            uint32 len = 1;
        }
        bytes sig = 1;
        optional string token = 2;
        repeated Chunk chunks = 3;
        optional bytes ford_sig = 4;
        optional FordDesc ford_desc = 6;
        Footer footer = 8;
    }
    repeated PutData data = 1;
    uint32 f3 = 3;
}

message ConfirmResponse {
    message Request {
        message Metric {
            string n = 1;
            string v = 2;
        }
        string url = 1;
        uint32 status = 2;
        repeated Metric edgeInfo = 4;
        optional bytes uploadMd5 = 7;
        repeated Metric metrics = 8;
        repeated Metric metrics2 = 9;
        string token = 10;
        uint32 f13 = 13;
    }
    repeated Request inner = 1;
    optional bytes confirmData = 2;
}

message HTTPRequest {
    message Header {
        string name = 1;
        string value = 2;
    }
    string domain = 1;
    uint32 port = 2;
    string method = 3;
    string path = 4;
    string protocol = 5;
    string protocolVer = 6;
    string scheme = 7;
    repeated Header headers = 8;
    string datacenter = 9;
    uint64 f11 = 11;
    uint32 f13 = 13;
}

message Container {
    message EncryptionMeta {
        message EncryptedChunks {
            bytes container = 1;
            bytes keys_container = 2;
        }
        uint32 size = 1;
        uint32 offset = 2;
        EncryptedChunks for_chunks = 3;
    }

    message ChunkMeta {
        bytes checksum = 1;
        optional bytes encryption_key = 2;
        uint64 size = 3;
        uint64 offset = 4;
    }
    message ChunkWrapper {
        ChunkMeta meta = 1;
        EncryptionMeta encryption = 2;
    }
    HTTPRequest request = 1;
    string clAuthP1 = 3;
    string clAuthP2 = 4;
    repeated ChunkWrapper chunks = 5;
}

message AuthorizeGet {
    message Item {
        bytes signature = 1;
        string object = 2;
    }
    repeated Item item = 1;
}


message FordChunkItem {
    bytes key = 1;
    bytes chunk_len = 2;
}

message FordItem {
    repeated FordChunkItem chunks = 1;
    bytes checksum = 2;
}

message FordChunk {
    FordItem item = 1;
}

message AuthorizeGetResponse {
    message F1 {
        message ChunkReferences {
            message ChunkReference {
                uint32 container_index = 1;
                uint32 chunk_index = 2;
            }
            bytes fileChecksum = 1;
            repeated ChunkReference chunkReferences = 2;
            bytes fordChecksum = 3;
            uint32 f5 = 5;
            ChunkReference fordReference = 6;
        }
        repeated Container containers = 1;
        repeated ChunkReferences references = 2;
    }
    message Error {
        message F2 {
            string reason = 3;
        }
        F2 f2 = 2;
    }
    F1 f1 = 1;
    Error error = 2;
    uint32 f = 4;
}

message PutCompleteResponse {
    message FinishedObject {
        bytes signature = 1;
        string receipt = 3;
    }
    repeated FinishedObject finished = 3;
}

message AuthorizePutResponse {
    message UploadTarget {
        message ChunkIdentifier {
            optional bytes chunk_id = 1;
            optional uint32 ford_index = 2;
        }
        string clAuthP1 = 1;
        HTTPRequest request = 2;
        string clAuthP2 = 4;
        repeated ChunkIdentifier chunks = 5;
    }
    message State {
        bytes signature = 1;
        optional string receipt = 3;
        uint32 f2 = 2;
        optional bytes fordId = 4;
    }
    repeated UploadTarget targets = 1;
    uint32 f3 = 3;
    repeated State currentStates = 4;
    optional bytes confirm_data = 6;
}

message PutFooter {
    bytes md5_sum = 1;
    optional bytes confirm_data = 2;
}